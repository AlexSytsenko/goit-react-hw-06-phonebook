{"version":3,"sources":["components/ContactItem/ContactItem.module.scss","components/FilterContacts/FilterContacts.module.scss","components/ContactsList/ContactsList.module.scss","components/Form/Form.module.scss","redux/contacts/actions.js","redux/contacts/reducer.js","redux/store.js","redux/contacts/operations.js","components/Form/Form.jsx","redux/contacts/selectors.js","components/ContactItem/ContactItem.jsx","components/ContactsList/ContactsList.jsx","components/FilterContacts/FilterContacts.jsx","App.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","clearContactsError","initialState","items","createReducer","_","payload","state","filter","id","loading","error","message","contactsReducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","devTools","process","axios","defaults","baseURL","Form","name","number","handleChangeForm","e","currentTarget","value","setState","handleSubmit","preventDefault","contact","props","onSubmit","reset","this","className","styles","form","label","input","type","pattern","title","required","onChange","button","Component","connect","dispatch","massege","get","then","data","length","post","catch","getLoading","getError","getFilter","getAllContacts","getVisibleContacts","createSelector","normalizedFilter","toLocaleLowerCase","includes","ContactsItem","onDeleteContact","item","contact__item","contact__text","contact__button","onClick","defaultProps","selectors","contactId","delete","fetchContacts","useEffect","contacts__list","map","actions","App","color","height","width","propTypes","PropTypes","bool","string","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0caae30a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact__button\":\"ContactItem_contact__button__1FbzC\",\"contact__item\":\"ContactItem_contact__item__1rYUe\",\"contact__text\":\"ContactItem_contact__text__3-mhS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"FilterContacts_label__29_b2\",\"input\":\"FilterContacts_input__ZtcZW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts__list\":\"ContactsList_contacts__list__3ragY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Form_button__3Brxt\",\"label\":\"Form_label__1Z7mF\",\"input\":\"Form_input__2e5Dl\",\"form\":\"Form_form__1cOkf\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction('conatacts/fetchContactsRequest');\r\nexport const fetchContactsSuccess = createAction('conatacts/fetchContactsSuccess');\r\nexport const fetchContactsError = createAction('conatacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('conatacts/addContactRequest');\r\nexport const addContactSuccess = createAction('conatacts/addContactSuccess');\r\nexport const addContactError = createAction('conatacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('conatacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('conatacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('conatacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('conatacts/filter');\r\nexport const clearContactsError = createAction('conatacts/clearContactsError');\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//Redux\r\n// import * as types from './types';\r\n\r\n// export const addContact = value => ({\r\n//   type: types.ADD,\r\n//   payload: value,\r\n// });\r\n\r\n// export const deleteContact = value => ({\r\n//   type: types.DELETE,\r\n//   payload: value,\r\n// });\r\n\r\n// export const filterContacts = value => ({\r\n//   type: types.FILTER,\r\n//   payload: value,\r\n// });","import { createReducer, combineReducers } from '@reduxjs/toolkit';\r\n\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter,\r\n  clearContactsError,\r\n} from './actions';\r\n\r\nconst initialState = {\r\n  items: [],\r\n  filter: '',\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst items = createReducer(initialState.items, {\r\n\r\n  [fetchContactsSuccess]: (_, {payload}) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({id}) => id !== payload),\r\n});\r\n\r\nconst loading = createReducer(initialState.loading, {\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n});\r\n\r\nconst error = createReducer(initialState.error, {\r\n  [addContactError]: (_, { payload }) => payload.message,\r\n  [deleteContactError]: (_, { payload }) => payload.message,\r\n  [fetchContactsError]: (_, { payload }) => payload.message,\r\n  [clearContactsError]: () => null,\r\n});\r\n\r\n\r\nconst filter = createReducer(initialState.filter, {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\n\r\nconst contactsReducer = combineReducers({\r\n  items,\r\n  loading,\r\n  error,\r\n  filter,\r\n});\r\n\r\nexport default contactsReducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//Redux\r\n\r\n// import { combineReducers } from 'redux';\r\n\r\n// import * as types from './types';\r\n\r\n// const initialState = {\r\n//   items: [\r\n//     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n//     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n//     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n//     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n//   ],\r\n//   filter: '',\r\n// };\r\n\r\n// const itemsReducer = (state = initialState.items, { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter(contact => contact.id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filterReducer = (state = initialState.filter, { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const contactsReducer = combineReducers({\r\n//   items: itemsReducer,\r\n//   filter: filterReducer,\r\n// });\r\n\r\n// export default contactsReducer;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  // persistStore,\r\n  // persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\n\r\nimport contactsReducer from './contacts/reducer';\r\n\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\n// const contactsPersistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    // contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n\r\nexport default store;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//Redux\r\n// import { createStore } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension'; для подключения devTools\r\n\r\n// import rootReducer from './contacts/rootReducer';\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// export default store;","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  clearContactsError,\r\n} from './actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\n\r\nexport const addContact = contact => dispatch => {\r\n  const { name } = contact;\r\n  const massege = { message: `${name} is already in contacts` };\r\n\r\n  dispatch(clearContactsError());\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .get(`/contacts?q=${name}`)\r\n    .then(({ data }) => {\r\n      if (data.length > 0) {\r\n        dispatch(addContactError(massege));\r\n        return;\r\n      }\r\n      axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n    \r\n    })\r\n    .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\n\r\nexport const deleteContact = contactId => dispatch => {\r\n  dispatch(clearContactsError());\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { addContact } from '../../redux/contacts/operations';\r\nimport styles from './Form.module.scss';\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChangeForm = e => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const { name, number } = this.state;\r\n\r\n    const contact = {\r\n      name,\r\n      number,\r\n    };\r\n\r\n    this.props.onSubmit(contact);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form className={styles.form} onSubmit={this.handleSubmit}>\r\n        <label className={styles.label}>\r\n          Name\r\n          <input\r\n            className={styles.input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            onChange={this.handleChangeForm}\r\n          />\r\n        </label>\r\n        <label className={styles.label}>\r\n          Number\r\n          <input\r\n            className={styles.input}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n            required\r\n            value={number}\r\n            onChange={this.handleChangeForm}\r\n          />\r\n        </label>\r\n        <button className={styles.button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: value => dispatch(addContact(value)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Form);\r\n","import { createSelector }  from '@reduxjs/toolkit'\r\n\r\nexport const getLoading = state => state.contacts.loading;\r\nexport const getError = state => state.contacts.error;\r\nexport const getFilter = state => state.contacts.filter;\r\nexport const getAllContacts = state => state.contacts.items;\r\n\r\n//Мемоизация\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    if (!filter) {\r\n      return contacts;\r\n    }\r\n    const normalizedFilter = filter.toLocaleLowerCase();\r\n\r\n    return contacts.filter(contact =>\r\n      contact.name.toLocaleLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export const getVisibleContacts = state => {\r\n//   const filter = getFilter(state);\r\n//   const contacts = getAllContacts(state);\r\n\r\n//   if (!filter) {\r\n//     return contacts;\r\n//   }\r\n//   const normalizedFilter = filter.toLocaleLowerCase();\r\n\r\n//   return contacts.filter(contact =>\r\n//     contact.name.toLocaleLowerCase().includes(normalizedFilter),\r\n//   );\r\n\r\n// };\r\n\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport * as selectors from '../../redux/contacts/selectors';\r\nimport * as operations from '../../redux/contacts/operations';\r\nimport styles from './ContactItem.module.scss';\r\n\r\nconst ContactsItem = ({ contacts, value, onDeleteContact }) => {\r\n  const contact = contacts.filter(item => item.id === value)[0];\r\n  const { name, number } = contact;\r\n\r\n  return (\r\n    <li className={styles.contact__item}>\r\n      <p className={styles.contact__text}>\r\n        {name}: {number}\r\n      </p>\r\n      <button\r\n        className={styles.contact__button}\r\n        type=\"button\"\r\n        onClick={() => onDeleteContact(value)}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactsItem.defaultProps = {\r\n  contacts: [],\r\n};\r\n\r\nContactsItem.propTypes = {\r\n  contacts: PropTypes.array,\r\n  value: PropTypes.number.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: selectors.getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: value => dispatch(operations.deleteContact(value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsItem);\r\n","import { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ContactsItem from '../ContactItem';\r\nimport * as operations from '../../redux/contacts/operations';\r\nimport * as selectors from '../../redux/contacts/selectors';\r\nimport styles from './ContactsList.module.scss';\r\n\r\nconst ContactsList = ({ contacts, fetchContacts }) => {\r\n  useEffect(() => fetchContacts, []);\r\n  return (\r\n    <ul className={styles.contacts__list}>\r\n      {contacts.map(({ id }) => (\r\n        <ContactsItem key={id} value={id} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: selectors.getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: dispatch(operations.fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const getVisibleContacts = (items, filter) => {\r\n//   if (!filter) {\r\n//     return items;\r\n//   }\r\n//   const normalizedFilter = filter.toLocaleLowerCase();\r\n\r\n//   return items.filter(contact =>\r\n//     contact.name.toLocaleLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport * as actions from '../../redux/contacts/actions';\r\nimport * as selectors from '../../redux/contacts/selectors';\r\nimport styles from './FilterContacts.module.scss';\r\n\r\nconst FilterContacts = ({ value, onChange }) => (\r\n  <label className={styles.label}>\r\n    Find contacts by name\r\n    <input\r\n      className={styles.input}\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={e => onChange(e.currentTarget.value)}\r\n    />\r\n  </label>\r\n);\r\n\r\nFilterContacts.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: selectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: value => dispatch(actions.changeFilter(value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterContacts);\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nimport Form from './components/Form';\r\nimport ContactsList from './components/ContactsList';\r\nimport FilterContacts from './components/FilterContacts';\r\nimport * as selectors from './redux/contacts/selectors';\r\nimport './styles/container.scss';\r\n\r\nconst App = ({ loading, error }) => (\r\n  <div className=\"container\">\r\n    <h2 className=\"title title__main\">Phonebook</h2>\r\n    <Form />\r\n    {loading && <Loader type=\"Circles\" color=\"#fff\" height={75} width={75} />}\r\n    {error && <h3 className=\"error\">{error}</h3>}\r\n    <h2 className=\"title\">Contacts</h2>\r\n    <FilterContacts />\r\n    <ContactsList />\r\n  </div>\r\n);\r\n\r\nApp.defaultProps = {\r\n  loading: false,\r\n  error: '',\r\n};\r\n\r\nForm.propTypes = {\r\n  loading: PropTypes.bool,\r\n  error: PropTypes.string,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  loading: selectors.getLoading(state),\r\n  error: selectors.getError(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(App);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//before Redax\r\n\r\n// state = {\r\n//   contacts: [\r\n//     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n//     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n//     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n//     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n//   ],\r\n//   filter: '',\r\n// };\r\n\r\n// componentDidUpdate(prevProps, prevState) {\r\n//   const prevContacts = prevState.сontacts;\r\n//   const nextContacts = this.state.contacts;\r\n\r\n//   if (prevContacts !== nextContacts) {\r\n//     localStorage.setItem('contacts', JSON.stringify(nextContacts));\r\n//   }\r\n// }\r\n\r\n// componentDidMount() {\r\n//   const contacts = localStorage.getItem('contacts');\r\n//   const parsedContacts = JSON.parse(contacts);\r\n\r\n//   if (parsedContacts) {\r\n//     this.setState({ contacts: parsedContacts });\r\n//   }\r\n// }\r\n\r\n// formSubmitHandler = ({ name, number }) => {\r\n//   if (!this.isUniqueContact(name)) {\r\n//     alert(`${name} is already in contacts`);\r\n//     return;\r\n//   }\r\n//   const contact = {\r\n//     id: shortid(),\r\n//     name,\r\n//     number,\r\n//   };\r\n//   this.setState(({ contacts }) => ({\r\n//     contacts: [...contacts, contact],\r\n//   }));\r\n// };\r\n\r\n// isUniqueContact = name => {\r\n//   const { contacts } = this.state;\r\n\r\n//   return !contacts.some(item => item.name === name);\r\n// };\r\n\r\n// changeFilter = e => {\r\n//   this.setState({ filter: e.currentTarget.value });\r\n// };\r\n\r\n// getVisibleContacts = () => {\r\n//   const { contacts, filter } = this.state;\r\n//   const normalizedFilter = filter.toLocaleLowerCase();\r\n\r\n//   return contacts.filter(contact =>\r\n//     contact.name.toLocaleLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n\r\n// deleteContact = contactId => {\r\n//   this.setState(prevState => ({\r\n//     contacts: prevState.contacts.filter(contact => contact.id !== contactId),\r\n//   }));\r\n// };\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport { Provider } from 'react-redux';\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\n\r\nimport store from './redux/store';\r\nimport './styles/base.scss';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\r\n        <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}